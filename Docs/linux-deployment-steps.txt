prereqs:
    terminal emulator running BASH or ZSH
    git commandline
    code editor (recommend vscode)
    notepad editor
    working Python 2/3
    Azure CLI v2
    blobxfer
    Azure Subscription with owner role

Process Notes...

1. clone Repo -- git clone https://github.com/lorax79/AzureDays/master

2. open folder in code editor

3. open a notepad to note important information

 - Open terminal emulator and:
    Run 'az login' and run through steps for device login
    Run 'az account show' - Make note in Notepad of your Subscription Name.


4. open ./OMS/omsMaster.parameters.json in code editor
    specifiy empty parameter values
    MAKE NOTE OF OMS WORKSPACE NAME in open notepad
    save changes to ./OMS/omsMaster.parameters.json


5. open deploy-oms.sh script file in the code editor
    edit empty variables
    make a note in your notepad of the name given to the SUPPORTRG variable
    save changes to script

6. in the terminal emulator, change the working directory to the directory you cloned the repository into
    Run 'sh deploy-oms.sh'
    Script will output the OMS workspace ID - Note this value in your open notepad editor

7. Go to https://portal.azure.com and log in. 
    browse to Log Analytics Workspace resource
    get your workspace key under advanced settings-->Connected Sources
    note workspace key value in notepad.
    Add counters under advanced settings-->Data-->Linux Performance Counters
    * Memory(*)\Available MBytes Memory
    * Process(*)\Used Memory
    * Processor(*)\% Processor Time
    * System(*)\Processes
    Click Save

8. open deploy-keyvault.sh in code editor
    edit empty variables
    ensure the SUPPORTRG variable matches the value used in the OMS deployment script
    ensure workspace key matches value grabbed from portal in step 7
    ensure that the variable SSHPUBKEYFILE contains the path to your SSH public key file.
    save the changes to the script

9.  run 'sh deploy-keyvault.sh' in terminal emulator
    once the script is complete, it will output your Keyvault ID.  Copy and paste this value into your notepad.
    run 'az keyvault secret list --vault-name <keyvault name>' to see a list of the secrets created by the script.

10. Open the deploy-websitecontent.sh script file. 
    Ensure the SUPPORTRG variable matches above steps
    Save and run deploy-websitecontent.sh
    browse to the content on the storage account from the output Uri
    Get the name of your storage account and save in your notepad

11. Open the cloudconfig-ubuntu.txt yml-formatted file 
    edit the proxy_pass line to reflect the name of your storage account in the uri
    Save.

12. open deploy-linuxVMs.sh in the code editor. 
    edit blank variables
    save the script once done editing
    

13. open Linux-Ubuntu-VM-Template.parameters.json in your code editor
    edit the empty parameters
    for the parameters sshRSAPublicKey and workspaceKey, copy the Keyvault ID from step 9 into both Id values. 
    Note that the secret names are hard-coded in this instance and were used in the keyvault deployment script.
    Note the value specified for 'adminUsername' in your notepad editor - you will need this to connect to your VMs
    save your changes to the parameters file

14. run 'sh deploy-linuxVMs.sh'
    Once completed test connectivity to your VMs using ssh '<adminUsername>@<fqdn or IP> -p 3441'
    Note how your RSA public key was deployed to the VM via the Azure Keyvault.
    Check for nginx processes running
    

15. Check the website content using the Uri output from the script

16. Check Docs/AzureDays-infrastructure-OSS.docx for Monitoring guide



